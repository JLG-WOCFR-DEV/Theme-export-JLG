<?php
if (!defined('ABSPATH')) {
    exit;
}

require_once __DIR__ . '/class-tejlg-admin-page.php';
require_once __DIR__ . '/class-tejlg-admin-export-page.php';
require_once __DIR__ . '/class-tejlg-admin-debug-page.php';

class TEJLG_Settings {
    const EXPORT_SCHEMA   = 'theme-export-jlg/settings';
    const EXPORT_VERSION  = 1;
    const SIGNATURE_ALG   = 'sha256';

    /**
     * Returns a normalized snapshot of the plugin settings.
     *
     * @return array<string,mixed>
     */
    public static function get_snapshot() {
        $snapshot = [
            'schedule'          => self::get_schedule_settings(),
            'export_preferences'=> self::get_export_preferences(),
            'debug_preferences' => self::get_debug_preferences(),
            'notifications'     => TEJLG_Export_Notifications::get_settings(),
        ];

        /**
         * Filters the snapshot exported by the settings manager.
         *
         * @param array<string,mixed> $snapshot Current snapshot data.
         */
        $snapshot = apply_filters('tejlg_settings_export_snapshot', $snapshot);

        if (!is_array($snapshot)) {
            $snapshot = [];
        }

        return $snapshot;
    }

    /**
     * Builds the payload written to disk during a settings export.
     *
     * @param array<string,mixed>|null $snapshot Optional snapshot to include. When null a fresh snapshot is generated.
     *
     * @return array<string,mixed>
     */
    public static function build_export_package($snapshot = null) {
        if (null === $snapshot) {
            $snapshot = self::get_snapshot();
        }

        if (!is_array($snapshot)) {
            $snapshot = [];
        }

        $generated_at_gmt = gmdate('c');

        $package = [
            'schema'            => self::EXPORT_SCHEMA,
            'version'           => self::EXPORT_VERSION,
            'generated_at_gmt'  => $generated_at_gmt,
            'site'              => [
                'home_url' => home_url(),
                'site_url' => site_url(),
            ],
            'settings'          => self::normalize_snapshot($snapshot),
        ];

        $package['signature'] = self::build_signature($package['settings'], $generated_at_gmt);

        /**
         * Filters the full package exported by the settings manager.
         *
         * Developers modifying the settings data must also update the signature
         * contained in the returned package.
         *
         * @param array<string,mixed> $package Exported package including metadata.
         */
        $package = apply_filters('tejlg_settings_export_package', $package);

        if (!is_array($package)) {
            $package = [];
        }

        return $package;
    }

    /**
     * Encodes an export package to JSON.
     *
     * @param array<string,mixed> $package Package generated by build_export_package().
     *
     * @return string|WP_Error
     */
    public static function encode_export_package(array $package) {
        $json = wp_json_encode($package, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);

        if (false === $json) {
            return new WP_Error('tejlg_settings_json_error', esc_html__("Impossible de sérialiser les réglages en JSON.", 'theme-export-jlg'));
        }

        return $json;
    }

    /**
     * Verifies the signature contained in an export package.
     *
     * @param array<string,mixed> $package Export package decoded from JSON.
     *
     * @return array<string,mixed> {
     *     @type bool   $valid         Whether the signature matches the settings payload.
     *     @type string $algorithm     Hashing algorithm used.
     *     @type string $expected_hash Hash calculated from the settings.
     *     @type string $actual_hash   Hash read from the package.
     * }
     */
    public static function verify_signature(array $package) {
        $settings  = isset($package['settings']) && is_array($package['settings']) ? $package['settings'] : [];
        $signature = isset($package['signature']) && is_array($package['signature']) ? $package['signature'] : [];

        $algorithm = isset($signature['algorithm']) ? strtolower((string) $signature['algorithm']) : self::SIGNATURE_ALG;
        $actual    = isset($signature['hash']) ? (string) $signature['hash'] : '';

        if (!in_array($algorithm, hash_algos(), true)) {
            $algorithm = self::SIGNATURE_ALG;
        }

        $expected = self::hash_settings($settings, $algorithm);

        return [
            'valid'         => hash_equals($expected, $actual),
            'algorithm'     => $algorithm,
            'expected_hash' => $expected,
            'actual_hash'   => $actual,
        ];
    }

    /**
     * Applies a decoded settings snapshot.
     *
     * @param array<string,mixed> $snapshot Settings snapshot extracted from an export package.
     * @param array<string,mixed> $context  Optional context (for instance the origin of the import).
     *
     * @return array<string,mixed> Summary of the applied changes.
     */
    public static function apply_snapshot($snapshot, $context = []) {
        if (!is_array($snapshot)) {
            return [
                'schedule_updated'           => false,
                'export_preferences_updated' => false,
                'debug_preferences_updated'  => false,
                'notifications_updated'      => false,
            ];
        }

        /**
         * Filters the snapshot before it is applied.
         *
         * @param array<string,mixed> $snapshot Snapshot to be imported.
         * @param array<string,mixed> $context  Additional context (origin, file path, etc.).
         */
        $snapshot = apply_filters('tejlg_settings_import_snapshot', $snapshot, $context);

        if (!is_array($snapshot)) {
            $snapshot = [];
        }

        $results = [
            'schedule_updated'           => false,
            'export_preferences_updated' => false,
            'debug_preferences_updated'  => false,
            'notifications_updated'      => false,
        ];

        if (isset($snapshot['schedule']) && is_array($snapshot['schedule'])) {
            TEJLG_Export::update_schedule_settings($snapshot['schedule']);
            TEJLG_Export::reschedule_theme_export_event();
            TEJLG_Export::ensure_cleanup_event_scheduled();
            $results['schedule_updated'] = true;
        }

        if (isset($snapshot['export_preferences']) && is_array($snapshot['export_preferences'])) {
            $results['export_preferences_updated'] = self::apply_export_preferences($snapshot['export_preferences']);
        }

        if (isset($snapshot['debug_preferences']) && is_array($snapshot['debug_preferences'])) {
            $results['debug_preferences_updated'] = self::apply_debug_preferences($snapshot['debug_preferences']);
        }

        if (isset($snapshot['notifications']) && is_array($snapshot['notifications'])) {
            $before = TEJLG_Export_Notifications::get_settings();
            $after  = TEJLG_Export_Notifications::update_settings($snapshot['notifications']);
            $results['notifications_updated'] = ($before !== $after);
        }

        return $results;
    }

    /**
     * Normalizes the structure of a snapshot.
     *
     * @param array<string,mixed> $snapshot Raw snapshot data.
     *
     * @return array<string,mixed>
     */
    private static function normalize_snapshot(array $snapshot) {
        if (!isset($snapshot['schedule']) || !is_array($snapshot['schedule'])) {
            $snapshot['schedule'] = self::get_schedule_settings();
        } else {
            $snapshot['schedule'] = self::normalize_schedule_settings($snapshot['schedule']);
        }

        if (!isset($snapshot['export_preferences']) || !is_array($snapshot['export_preferences'])) {
            $snapshot['export_preferences'] = self::get_export_preferences();
        } else {
            $snapshot['export_preferences'] = self::normalize_export_preferences($snapshot['export_preferences']);
        }

        if (!isset($snapshot['debug_preferences']) || !is_array($snapshot['debug_preferences'])) {
            $snapshot['debug_preferences'] = self::get_debug_preferences();
        } else {
            $snapshot['debug_preferences'] = self::normalize_debug_preferences($snapshot['debug_preferences']);
        }

        if (!isset($snapshot['notifications']) || !is_array($snapshot['notifications'])) {
            $snapshot['notifications'] = TEJLG_Export_Notifications::get_settings();
        } else {
            $snapshot['notifications'] = TEJLG_Export_Notifications::normalize_settings($snapshot['notifications']);
        }

        return $snapshot;
    }

    /**
     * Creates the signature array stored in export packages.
     *
     * @param array<string,mixed> $settings
     * @param string              $generated_at_gmt
     *
     * @return array<string,string>
     */
    private static function build_signature(array $settings, $generated_at_gmt) {
        $algorithm = self::SIGNATURE_ALG;

        return [
            'algorithm'        => $algorithm,
            'hash'             => self::hash_settings($settings, $algorithm),
            'generated_at_gmt' => (string) $generated_at_gmt,
        ];
    }

    /**
     * Calculates the hash for a snapshot using the provided algorithm.
     *
     * @param array<string,mixed> $settings  Snapshot to hash.
     * @param string              $algorithm Hash algorithm supported by hash_algos().
     *
     * @return string
     */
    private static function hash_settings(array $settings, $algorithm) {
        $algorithm = strtolower((string) $algorithm);

        if (!in_array($algorithm, hash_algos(), true)) {
            $algorithm = self::SIGNATURE_ALG;
        }

        $json = wp_json_encode($settings, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);

        if (false === $json) {
            $json = '';
        }

        return hash($algorithm, $json);
    }

    /**
     * Returns the current schedule settings.
     *
     * @return array<string,mixed>
     */
    private static function get_schedule_settings() {
        return TEJLG_Export::get_schedule_settings();
    }

    /**
     * Normalizes schedule settings without persisting them.
     *
     * @param array<string,mixed> $settings
     *
     * @return array<string,mixed>
     */
    private static function normalize_schedule_settings(array $settings) {
        $defaults    = TEJLG_Export::get_default_schedule_settings();
        $frequencies = array_keys(TEJLG_Export::get_available_schedule_frequencies());

        $frequency = isset($settings['frequency']) ? sanitize_key((string) $settings['frequency']) : $defaults['frequency'];

        if (!in_array($frequency, $frequencies, true)) {
            $frequency = $defaults['frequency'];
        }

        $exclusions = isset($settings['exclusions']) ? (string) $settings['exclusions'] : $defaults['exclusions'];
        $exclusions = (string) wp_unslash($exclusions);
        $exclusions = TEJLG_Export::sanitize_exclusion_patterns_string($exclusions);

        $retention = isset($settings['retention_days']) ? (int) $settings['retention_days'] : (int) $defaults['retention_days'];

        if ($retention < 0) {
            $retention = 0;
        }

        $default_run_time = isset($defaults['run_time']) ? (string) $defaults['run_time'] : '00:00';
        $run_time         = isset($settings['run_time']) ? (string) $settings['run_time'] : $default_run_time;
        $run_time         = trim($run_time);

        if (!preg_match('/^([01]\d|2[0-3]):([0-5]\d)$/', $run_time, $matches)) {
            $run_time = $default_run_time;
        } else {
            $run_time = sprintf('%02d:%02d', (int) $matches[1], (int) $matches[2]);
        }

        return [
            'frequency'      => $frequency,
            'exclusions'     => $exclusions,
            'retention_days' => $retention,
            'run_time'       => $run_time,
        ];
    }

    /**
     * Returns UI/export related preferences.
     *
     * @return array<string,mixed>
     */
    private static function get_export_preferences() {
        $exclusions = get_option(TEJLG_Admin_Export_Page::EXCLUSION_PATTERNS_OPTION, '');
        $portable   = get_option(TEJLG_Admin_Export_Page::PORTABLE_MODE_OPTION, null);

        $preferences = [
            'exclusion_patterns' => TEJLG_Export::sanitize_exclusion_patterns_string($exclusions),
            'portable_mode'      => ('1' === (string) $portable),
        ];

        return self::normalize_export_preferences($preferences);
    }

    /**
     * Returns debug/preferences settings.
     *
     * @return array<string,mixed>
     */
    private static function get_debug_preferences() {
        $stored_icon = get_option(TEJLG_Admin_Debug_Page::METRICS_ICON_OPTION, TEJLG_Admin_Debug_Page::METRICS_ICON_DEFAULT);

        $preferences = [
            'metrics_icon_size' => self::sanitize_metrics_icon_size($stored_icon),
        ];

        return self::normalize_debug_preferences($preferences);
    }

    /**
     * Applies export preferences to persistent storage.
     *
     * @param array<string,mixed> $preferences
     *
     * @return bool True when at least one preference has been updated.
     */
    private static function apply_export_preferences(array $preferences) {
        $normalized = self::normalize_export_preferences($preferences);
        $updated    = false;

        $exclusions = isset($normalized['exclusion_patterns']) ? (string) $normalized['exclusion_patterns'] : '';
        $stored     = get_option(TEJLG_Admin_Export_Page::EXCLUSION_PATTERNS_OPTION, '');

        if ($stored !== $exclusions) {
            update_option(TEJLG_Admin_Export_Page::EXCLUSION_PATTERNS_OPTION, $exclusions, false);
            $updated = true;
        }

        $portable_flag = isset($normalized['portable_mode']) && $normalized['portable_mode'] ? '1' : '0';
        $stored_flag   = get_option(TEJLG_Admin_Export_Page::PORTABLE_MODE_OPTION, '0');

        if ((string) $stored_flag !== $portable_flag) {
            update_option(TEJLG_Admin_Export_Page::PORTABLE_MODE_OPTION, $portable_flag, false);
            $updated = true;
        }

        return $updated;
    }

    /**
     * Applies debug preferences to persistent storage.
     *
     * @param array<string,mixed> $preferences
     *
     * @return bool True when preferences have been updated.
     */
    private static function apply_debug_preferences(array $preferences) {
        $normalized = self::normalize_debug_preferences($preferences);
        $stored     = get_option(TEJLG_Admin_Debug_Page::METRICS_ICON_OPTION, TEJLG_Admin_Debug_Page::METRICS_ICON_DEFAULT);

        if ((int) $stored !== $normalized['metrics_icon_size']) {
            update_option(TEJLG_Admin_Debug_Page::METRICS_ICON_OPTION, $normalized['metrics_icon_size'], false);

            return true;
        }

        return false;
    }

    /**
     * Normalizes export preferences before storage.
     *
     * @param array<string,mixed> $preferences
     *
     * @return array<string,mixed>
     */
    private static function normalize_export_preferences(array $preferences) {
        $exclusions = '';

        if (isset($preferences['exclusion_patterns'])) {
            $exclusions = TEJLG_Export::sanitize_exclusion_patterns_string($preferences['exclusion_patterns']);
        }

        $portable = false;

        if (isset($preferences['portable_mode'])) {
            $portable = (bool) $preferences['portable_mode'];
        }

        return [
            'exclusion_patterns' => $exclusions,
            'portable_mode'      => $portable,
        ];
    }

    /**
     * Normalizes debug preferences before storage.
     *
     * @param array<string,mixed> $preferences
     *
     * @return array<string,mixed>
     */
    private static function normalize_debug_preferences(array $preferences) {
        $icon_size = isset($preferences['metrics_icon_size']) ? $preferences['metrics_icon_size'] : TEJLG_Admin_Debug_Page::METRICS_ICON_DEFAULT;

        return [
            'metrics_icon_size' => self::sanitize_metrics_icon_size($icon_size),
        ];
    }

    /**
     * Sanitizes the metrics icon size value.
     *
     * @param mixed $value Raw value stored in the database.
     *
     * @return int
     */
    private static function sanitize_metrics_icon_size($value) {
        if (is_string($value)) {
            $value = trim($value);
        }

        if (!is_numeric($value)) {
            $value = TEJLG_Admin_Debug_Page::METRICS_ICON_DEFAULT;
        }

        $value = (int) round((float) $value);

        if ($value < TEJLG_Admin_Debug_Page::METRICS_ICON_MIN) {
            return TEJLG_Admin_Debug_Page::METRICS_ICON_MIN;
        }

        if ($value > TEJLG_Admin_Debug_Page::METRICS_ICON_MAX) {
            return TEJLG_Admin_Debug_Page::METRICS_ICON_MAX;
        }

        return $value;
    }
}
